##$Id: version.makeinc 1.42 2014/11/26 12:13:00 Carsten tnt $
##$Log: version.makeinc $
##Revision 1.42  2014/11/26 12:13:00  Carsten
##1) Changed SW Version from "*" to "V2.0" in version string
##2) Changed date/time separator from "." to "-" in version string
##Revision 1.41  2014/05/05 13:19:23  Peter
##Removed whitespace after version string
##Revision 1.40  2014/05/05 13:10:02  Peter
##Changes for ANDROID target: Now writing version info to version.properties
##Revision 1.39  2014/03/27 10:52:23  Peter
##Added Android support
##Please verify on other targets
##Revision 1.38  2014/01/26 12:29:50  jacob
##BASEDEVPATH included in phony versionstr.h when not supporting MKS
##Revision 1.37  2013/11/04 13:33:55  jacob
##Added empty vercmd fot NOMKS target
##Revision 1.36  2013/10/31 16:44:35  jacob
##Added vercmd target so that all target can depend on it
##This to make version info run before all the actual compile jobs
##Revision 1.35  2013/10/21 06:45:51  jacob
##Revided scheme for scanning after FIXME's using the preprocessor 
##Revision 1.34  2012/02/19 15:39:28  jacob
##BASEDEVPATH is current path
##Revision 1.33  2011/12/09 12:42:00  Peter
##Added MKSVERSION_SHORT, MKSVERSION_MAJOR and MKSVERSION_MINOR
##Revision 1.32  2011/12/09 10:51:27  jacob
##Fixes to clean
##Revision 1.31  2011/12/09 10:32:41  jacob
##Now pipes into /dev/null
##Revision 1.30  2011/12/07 20:01:58  jacob
##Now creates an objdir if not existing
##Revision 1.29  2011/12/07 17:37:18  jacob
##Tab versus space bugfix (another)
##Revision 1.28  2011/12/07 14:04:47  Peter
##Tab versus space bugfix
##Revision 1.27  2011/11/29 10:56:41  jacob
##Now checks for some mandatory settings
##Revision 1.26  2011/10/28 11:57:11  jacob
##version target is dead
##Revision 1.25  2011/10/28 09:14:21  jacob
##Now version string should be rebuilt if needed
##Revision 1.24  2011/10/27 08:23:05  jacob
##1.23.1.2 into main trunk
##Revision 1.23.1.2  2011/10/13 13:06:15  jacob
##Support for not using MKS
##Revision 1.23.1.1  2011/09/26 18:57:35  jacob
##Revision 1.23  2011/06/29 11:37:07  jacob
##Now supports a short version string
##Revision 1.22  2010/01/14 11:31:26  jacob
##Typo
##Revision 1.21  2010/01/14 11:07:56  jacob
##Now handles versionstr.h in a new way
##Revision 1.20  2010/01/11 13:46:37  jacob
##Updated the fixme script
##Revision 1.19  2010/01/11 12:40:46  jacob
##Added fixme target
##Revision 1.18  2010/01/10 09:31:13  Administrator
##Added a PHONY tag to version
##Revision 1.17  2010/01/09 12:13:25  Administrator
##Minor fixes related to new make
##Revision 1.16  2009/12/21 10:36:52  jacob
##Added STRICTRELEASE
##Revision 1.15  2009/03/18 09:51:33  Peter
##Revision 1.14  2009/02/04 11:34:47  jacob
##Now creates a basedvelomentpath define in versionstr.h. For jumping to log lines
##Revision 1.13  2009/01/13 11:45:56  jacob
##ERxplicit MKSPROJECT now possible
##Revision 1.12  2009/01/02 10:10:49  jacob
##Now looks for sandbox in parent dir too.
##Revision 1.11  2008/10/08 12:36:02  jacob
##Revision 1.10  2008/10/08 12:09:57  jacob
##Moved versionrelated stuff into version.makeinc
##Revision 1.9  2008/08/18 20:10:39  jacob
##backup
##Revision 1.8  2008/06/17 14:19:43  Jacob
##Revision 1.7  2008/06/17 14:18:52  Jacob
##PROJECT renamed to MKSPROJECT
##Revision 1.6  2007/07/03 22:12:40  jacob
##Updated to hande subversions in the project
##Revision 1.4  2006/03/24 14:09:22  Jacob
##Revision 1.3  2006/03/24 14:08:28  Jacob
##Without the bug
##Revision 1.2  2006/03/24 14:06:59  Jacob
##Now includes seconds in versionstr too
##Revision 1.1  2005/07/09 05:47:13  Jacob
##Initial revision

#Kill version str 
#$(shell rm -rf versionStr.h)

PJ	:= c:/mks/mksnt/pj

ifeq "$(TARGETARCH)" "ANDROID" 
#VERSION_FILENAME	:= res/values/version.xml
#VERSION_FILE_PRE	:= <?xml version=\"1.0\" encoding=\"utf-8\"?><resources>
#VERSION_FILE_POST	:= </resources>
#VERSION_STRING_PRE	:= <string name=\"VERSIONA\">
#VERSION_STRING_POST	:= </string>
#VERSION_NUM_PRE		:= <integer name=\"VERSIONA_NUM\">
#VERSION_NUM_POST	:= </integer>
#BASEDEVELOPMENTPATH_PRE := <string name=\"BASEDEVELOPMENTPATH\">
#BASEDEVELOPMENTPATH_POST:= </string> <!-- Where to find sourcefiles -->

VERSION_FILENAME	:= version.properties
VERSION_FILE_PRE	:= \# This file is automatically generated by version.makeinc
VERSION_FILE_POST	:=
VERSION_STRING_PRE	:=Version.VERSIONA=
VERSION_STRING_POST	:=
VERSION_NUM_PRE		:=Version.VERSIONA_NUM=
VERSION_NUM_POST	:=
BASEDEVELOPMENTPATH_PRE :=Version.BASEDEVELOPMENTPATH=
BASEDEVELOPMENTPATH_POST:=

else
VERSION_FILENAME	:= VersionStr.h
VERSION_FILE_PRE	:= 
VERSION_FILE_POST	:= 
VERSION_STRING_PRE	:= \#define VERSIONA \"
VERSION_STRING_POST	:= \"
VERSION_NUM_PRE		:= \#define VERSIONA_NUM (
VERSION_NUM_POST	:= )
BASEDEVELOPMENTPATH_PRE := \#define BASEDEVELOPMENTPATH \"
BASEDEVELOPMENTPATH_POST:= \" // Where to find sourcefiles
endif


.PHONY : $(VERSION_FILENAME) vercmd

# ensure we have an object dir 
$(shell [ -d "$(OBJDIR)" ] || mkdir -p $(OBJDIR))

ifndef NOMKS
USEMKS	:= $(shell if [ -f $(PJ) ]; then echo 1; fi)
endif

ifndef TARGETARCH
        $(error You must define TARGETARCH. AVR, NIOS, WIN32, MFC, ANDROID)
endif

ifndef COMPILERTYPE
        $(error You must define COMPILERTYPE: GCC or MS)
	exit 1;
endif

BASEDEVELOPMENTPATH := $(shell cygpath -m $(shell pwd)/.)

ifeq "$(USEMKS)" "1" 

ifndef MKSPROJECT
        $(error You must define MKSPROJECT)
	exit 1;
endif


# We like to remove the VersionStr.h file 
EXTRACLEANTARGET 	+= versionclean


#Create a version header
$(VERSION_FILENAME): vercmd

vercmd:
	@echo "$(VERSION_FILE_PRE)" > $(VERSION_FILENAME)
ifndef SHORTVERSION

	@if c:/mks/mksnt/pj what -P $(MKSPROJECT) | grep -E "modified" > /dev/null; then\
		echo "Changed project members";\
			c:/mks/mksnt/pj header -P $(MKSPROJECT) | sed -e s@"Revision: \([0-9\.]*\)"@"$(VERSION_STRING_PRE)\\1\* `date +%y.%m.%d.%H:%M.%S`$(VERSION_STRING_POST)"@ | grep -E "$(VERSION_STRING_PRE)" >> $(VERSION_FILENAME);\
			if [ "$(STRICTRELEASE)" = "1" ]; then echo "Abort due to strictrelease"; exit 42;fi;\
	else\
		echo "Members up to date";\
		if c:/mks/mksnt/pj mods -P $(MKSPROJECT) | grep -E "changed|Added"; then\
			echo "Project NOT up to date";\
			c:/mks/mksnt/pj header -P $(MKSPROJECT) | sed -e s@"Revision: \([0-9\.]*\)"@"$(VERSION_STRING_PRE)\\1\* `date +%y.%m.%d.%H:%M.%S`$(VERSION_STRING_POST)"@ | grep -E "$(VERSION_STRING_PRE)" >> $(VERSION_FILENAME);\
			if [ "$(STRICTRELEASE)" = "1" ]; then echo "Abort due to strictrelease"; exit 42;fi;\
		else\
			echo "Project up to date";\
			c:/mks/mksnt/pj header -P $(MKSPROJECT) | sed -e s@"Revision: \([0-9\.]*\)"@"$(VERSION_STRING_PRE)\\1 `date +%y.%m.%d.%H:%M.%S`$(VERSION_STRING_POST)"@ | grep -E "$(VERSION_STRING_PRE)" >> $(VERSION_FILENAME);\
		fi;\
	fi;

else 
	@ECHO Using a short version string 
	@if c:/mks/mksnt/pj what -P $(MKSPROJECT) | grep -E "modified" > /dev/null; then\
		echo "Changed project members";\
			c:/mks/mksnt/pj header -P $(MKSPROJECT) | sed -e s@"Revision: \([0-9\.]*\)"@"$(VERSION_STRING_PRE)\\1\*$(VERSION_STRING_POST)"@ | grep -E "$(VERSION_STRING_PRE)" >> $(VERSION_FILENAME);\
			if [ "$(STRICTRELEASE)" = "1" ]; then echo "Abort due to strictrelease"; exit 42;fi;\
	else\
		echo "Members up to date";\
		if c:/mks/mksnt/pj mods -P $(MKSPROJECT) | grep -E "changed|Added"; then\
			echo "Project NOT up to date";\
			c:/mks/mksnt/pj header -P $(MKSPROJECT) | sed -e s@"Revision: \([0-9\.]*\)"@"$(VERSION_STRING_PRE)\\1\*$(VERSION_STRING_POST)"@ | grep -E "$(VERSION_STRING_PRE)" >> $(VERSION_FILENAME);\
			if [ "$(STRICTRELEASE)" = "1" ]; then echo "Abort due to strictrelease"; exit 42;fi;\
		else\
			echo "Project up to date";\
			c:/mks/mksnt/pj header -P $(MKSPROJECT) | sed -e s@"Revision: \([0-9\.]*\)"@"$(VERSION_STRING_PRE)\\1$(VERSION_STRING_POST)"@ | grep -E "$(VERSION_STRING_PRE)" >> $(VERSION_FILENAME);\
		fi;\
	fi;
	
endif 

	@echo "$(VERSION_NUM_PRE)$(shell echo "ibase=10;obase=10; $(shell c:/mks/mksnt/pj header -P $(MKSPROJECT) | grep -E "Revision:" | sed -e s@"Revision: \([0-9]*\)\.\([0-9]*\)"@"(\\1*10000)+\\2"@)" | bc)$(VERSION_NUM_POST)" >> $(VERSION_FILENAME)
	@echo "$(BASEDEVELOPMENTPATH_PRE)$(BASEDEVELOPMENTPATH)$(BASEDEVELOPMENTPATH_POST)" >> $(VERSION_FILENAME)
	@echo "$(VERSION_FILE_POST)" >> $(VERSION_FILENAME)
	


MKSVERSION := 		$(shell if c:/mks/mksnt/pj what -P $(MKSPROJECT) | grep -E "modified" > /dev/null; then \
					c:/mks/mksnt/pj header -P $(MKSPROJECT) | grep -E "Revision:" | sed -e s@"Revision: \([0-9\.]*\)"@"\\1_`date +%y.%m.%d.%H%M`"@; \
				else \
					if c:/mks/mksnt/pj mods -P $(MKSPROJECT) | grep -E "changed|Added" > /dev/null; then \
						c:/mks/mksnt/pj header -P $(MKSPROJECT) | grep -E "Revision:" | sed -e s@"Revision: \([0-9\.]*\)"@"\\1_`date +%y.%m.%d.%H%M`"@; \
					else\
						c:/mks/mksnt/pj header -P $(MKSPROJECT) | grep -E "Revision:" | sed -e s@"Revision: \([0-9\.]*\)"@"\\1"@; \
					fi;\
				fi;)

MKSVERSION_SHORT := 	$(shell c:/mks/mksnt/pj header -P $(MKSPROJECT) | grep -E "Revision:" | sed -e s@"Revision: \([0-9\.]*\)"@"\\1"@)
MKSVERSION_MAJOR := 	$(shell c:/mks/mksnt/pj header -P $(MKSPROJECT) | grep -E "Revision:" | sed -e s@"Revision: \([0-9]*\)\.\([0-9]*\)"@"\\1"@)
MKSVERSION_MINOR := 	$(shell c:/mks/mksnt/pj header -P $(MKSPROJECT) | grep -E "Revision:" | sed -e s@"Revision: \([0-9]*\)\.\([0-9]*\)"@"\\2"@)





# Scan dependencies for all the files that's compiled into the project 

HEADERPROJECTFILES := $(shell if [ -f $(PROGRAM_NAME).dep ]; then \
                           cat $(PROGRAM_NAME).dep | \
			   sed -e 's/^$$(OBJDIR)\/.\+://g' | \
			   sed -e 's/ /\n/g' | \
			   sort | \
			   uniq -i |\
			   sed  -e '/^.*\.h$$/!d' ;\
                        else \
                           echo "Empty";\
                        fi;)
PROJECTFILES	:= $(SOURCE) $(HEADERPROJECTFILES)

else ## ifeq $(USEMKS) "1" 

$(VERSION_FILENAME): version

vercmd:

version:
	# "********* NO MKS SUPPORT *********
	@if [ "$(STRICTRELEASE)" = "1" ]; then echo "Abort due to missing MKS"; exit 42;fi;
	@echo "$(VERSION_FILE_PRE)" > $(VERSION_FILENAME)
	@echo "XXX" | sed -e s@"XXX\([0-9\.]*\)"@"$(VERSION_STRING_PRE)\\1\V2.0 `date +%y.%m.%d-%H:%M.%S`$(VERSION_STRING_POST) "@ >> $(VERSION_FILENAME)
	@echo "$(VERSION_NUM_PRE)-1$(VERSION_NUM_POST)" >> $(VERSION_FILENAME)
	@echo "$(BASEDEVELOPMENTPATH_PRE)$(BASEDEVELOPMENTPATH)$(BASEDEVELOPMENTPATH_POST)" >> $(VERSION_FILENAME)
	@echo "$(VERSION_FILE_POST)" >> $(VERSION_FILENAME)

endif 

versionclean: 
	@Echo Removing version files
	@rm -rf $(VERSION_FILENAME)

fixme:
	-@rm -rf abe.txt
	-@for i in $(SOURCE) ;\
	do $(CC) -c -x c++ -E -P $(CCFLAGS) -DFIXMETEST $$i >> abe.txt; done
	@grep "FIXMEMARKER " abe.txt | sort | uniq -i | sed -e 's/[ \t]*FIXMEMARKER \"\(.*\)\"/\1/g' > fixmes.txt
	@grep "TODOMARKER " abe.txt | sort | uniq -i | sed -e 's/[ \t]*TODOMARKER //g' > todos.txt

	@echo 
	@Echo "1. Priority fixmes"
	@grep "(1" fixmes.txt

	@echo 
	@Echo "2. Priority fixmes"
	@grep "(2" fixmes.txt

	@echo 
	@Echo "3. Priority fixmes"
	@grep "(3" fixmes.txt
	
	@echo 
	@Echo " The rest"
	@grep "([^123]" fixmes.txt

	-@rm -rf abe.txt

